swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /question/addQuestion:
    post:
      tags:
      - question
      description: Add question to DB
      operationId: QuestionController.AddQuestion
      parameters:
      - in: body
        name: body
        description: QuestionBody
        required: true
        schema:
          $ref: '#/definitions/models.AllQuestionResult'
      responses:
        "200":
          description: Add Success
        "403":
          description: Add fail
  /question/getAllQuestion:
    get:
      tags:
      - question
      description: Get All Question From DB
      operationId: QuestionController.GetAllQuestion
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.AllQuestionResult'
  /user/login:
    post:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: formData
        name: username
        description: The username for login
        required: true
        type: string
      - in: formData
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.AllQuestion'
        "403":
          description: user not exist
  /user/logout:
    post:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
  /user/register:
    post:
      tags:
      - user
      description: add user into server
      operationId: UserController.Register
      parameters:
      - in: formData
        name: username
        description: The username for register
        required: true
        type: string
      - in: formData
        name: password
        description: The password for register
        required: true
        type: string
      responses:
        "200":
          description: register success
        "403":
          description: user has Registered
definitions:
  models.AllQuestion:
    title: AllQuestion
    type: object
    properties:
      Answer:
        type: string
      Category:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      Question:
        type: string
      QuestionType:
        type: integer
        format: int64
  models.AllQuestionResult:
    title: AllQuestionResult
    type: object
    properties:
      Answer:
        type: string
      Category:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      Options:
        type: array
        items:
          $ref: '#/definitions/models.Option'
      Question:
        type: string
      QuestionType:
        type: integer
        format: int64
  models.Option:
    title: Option
    type: object
    properties:
      AllQuestionId:
        type: integer
        format: int64
      Check:
        type: string
      Description:
        type: string
      Id:
        type: integer
        format: int64
tags:
- name: user
  description: |
    Operations about Users
